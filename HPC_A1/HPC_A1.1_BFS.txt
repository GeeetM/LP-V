//BFS
#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

// Function to perform parallel BFS
void parallelBFS(std::vector<std::vector<int>>& graph, int start, std::vector<int>& visited_nodes) {
    int num_nodes = graph.size();
    std::vector<bool> visited(num_nodes, false);
    std::queue<int> q;

    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int size = q.size();
        
        // Parallelize node expansion
        #pragma omp parallel for
        for (int i = 0; i < size; ++i) {
            int node;
            #pragma omp critical
            {
                node = q.front();
                q.pop();
            }

            // Process node
            visited_nodes.push_back(node);

            // Explore neighbors
            for (int neighbor : graph[node]) {
                if (!visited[neighbor]) {
                    #pragma omp critical
                    {
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
        }
    }
}

int main() {
    int num_nodes, num_edges;
    std::cout << "Enter the number of nodes and edges: ";
    std::cin >> num_nodes >> num_edges;

    std::vector<std::vector<int>> graph(num_nodes);

    std::cout << "Enter the edges (node1 node2):" << std::endl;
    for (int i = 0; i < num_edges; ++i) {
        int node1, node2;
        std::cin >> node1 >> node2;
        graph[node1].push_back(node2);
        graph[node2].push_back(node1); // For undirected graph
    }

    int start_node;
    std::cout << "Enter the starting node for BFS: ";
    std::cin >> start_node;

    std::vector<int> visited_nodes;
    // Start BFS from the specified node
    parallelBFS(graph, start_node, visited_nodes);

    // Print the visited nodes in array format
    std::cout << "Visited nodes: [ ";
    for (int node : visited_nodes) {
        std::cout << node << " ";
    }
    std::cout << "]" << std::endl;

    return 0;
}
