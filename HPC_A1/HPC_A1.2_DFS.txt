//DFS
#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

// Function to perform parallel DFS
void parallelDFS(std::vector<std::vector<int>>& graph, int start, std::vector<int>& visited_nodes) {
    int num_nodes = graph.size();
    std::vector<bool> visited(num_nodes, false);
    std::stack<int> stk;

    stk.push(start);

    while (!stk.empty()) {
        int node = stk.top();
        stk.pop();

        if (!visited[node]) {
            visited[node] = true;
            visited_nodes.push_back(node);

            // Explore neighbors in reverse order to match DFS
            #pragma omp parallel for
            for (int i = graph[node].size() - 1; i >= 0; --i) {
                int neighbor = graph[node][i];
                if (!visited[neighbor]) {
                    stk.push(neighbor);
                }
            }
        }
    }
}

int main() {
    int num_nodes, num_edges;
    std::cout << "Enter the number of nodes and edges: ";
    std::cin >> num_nodes >> num_edges;

    std::vector<std::vector<int>> graph(num_nodes);

    std::cout << "Enter the edges (node1 node2):" << std::endl;
    for (int i = 0; i < num_edges; ++i) {
        int node1, node2;
        std::cin >> node1 >> node2;
        graph[node1].push_back(node2);
        graph[node2].push_back(node1); // For undirected graph
    }

    int start_node;
    std::cout << "Enter the starting node for DFS: ";
    std::cin >> start_node;

    std::vector<int> visited_nodes;
    // Start DFS from the specified node
    parallelDFS(graph, start_node, visited_nodes);

    // Print the visited nodes in array format
    std::cout << "Visited nodes: [ ";
    for (int node : visited_nodes) {
        std::cout << node << " ";
    }
    std::cout << "]" << std::endl;

    return 0;
}
