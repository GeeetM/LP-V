#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <omp.h>

// Sequential merge function for merging two sorted subarrays
void merge(std::vector<int>& arr, int left, int middle, int right) {
    int n1 = middle - left + 1;
    int n2 = right - middle;

    std::vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; ++i)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[middle + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        } else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }
}

// Sequential merge sort function
void sequentialMergeSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        int middle = left + (right - left) / 2;
        sequentialMergeSort(arr, left, middle);
        sequentialMergeSort(arr, middle + 1, right);
        merge(arr, left, middle, right);
    }
}

// Parallel merge sort function
void parallelMergeSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        int middle = left + (right - left) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(arr, left, middle);
            #pragma omp section
            parallelMergeSort(arr, middle + 1, right);
        }
        merge(arr, left, middle, right);
    }
}

int main() {
    int n;
    std::cout << "Enter the size of the array: ";
    std::cin >> n;

    std::vector<int> arr(n);
    std::cout << "Enter " << n << " elements: ";
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i];
    }

    // Measure execution time for sequential merge sort
    auto start_seq = std::chrono::high_resolution_clock::now();
    std::vector<int> seq_arr = arr; // Make a copy for sequential sorting
    sequentialMergeSort(seq_arr, 0, n - 1);
    auto end_seq = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> elapsed_seconds_seq = end_seq - start_seq;

    // Measure execution time for parallel merge sort
    auto start_parallel = std::chrono::high_resolution_clock::now();
    std::vector<int> parallel_arr = arr; // Make a copy for parallel sorting
    parallelMergeSort(parallel_arr, 0, n - 1);
    auto end_parallel = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> elapsed_seconds_parallel = end_parallel - start_parallel;

    // Print sorted arrays
    std::cout << "\nSorted array (Parallel Merge Sort): ";
    for (int i = 0; i < n; ++i) {
        std::cout << parallel_arr[i] << " ";
    }
    std::cout << std::endl;

    // Print execution time
    std::cout << "Sequential Merge Sort Time: " << elapsed_seconds_seq.count() << " milliseconds\n";
    std::cout << "Parallel Merge Sort Time: " << elapsed_seconds_parallel.count() << " milliseconds\n";

    return 0;
}
