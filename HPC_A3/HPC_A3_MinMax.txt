//MimMax using OpenMP
#include <iostream>
#include <vector>
#include <omp.h>

// Function to find the minimum element in an array using parallel reduction
template<typename T>
T parallelMin(const std::vector<T>& arr) {
    T min_val = arr[0];
    #pragma omp parallel for reduction(min:min_val)
    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] < min_val) {
            min_val = arr[i];
        }
    }
    return min_val;
}

// Function to find the maximum element in an array using parallel reduction
template<typename T>
T parallelMax(const std::vector<T>& arr) {
    T max_val = arr[0];
    #pragma omp parallel for reduction(max:max_val)
    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }
    return max_val;
}

// Function to calculate the sum of elements in an array using parallel reduction
template<typename T>
T parallelSum(const std::vector<T>& arr) {
    T sum_val = 0;
    #pragma omp parallel for reduction(+:sum_val)
    for (int i = 0; i < arr.size(); ++i) {
        sum_val += arr[i];
    }
    return sum_val;
}

// Function to calculate the average of elements in an array using parallel reduction
template<typename T>
double parallelAverage(const std::vector<T>& arr) {
    T sum_val = parallelSum(arr);
    return static_cast<double>(sum_val) / arr.size();
}

int main() {
    int size;
    std::cout << "Enter the size of the array: ";
    std::cin >> size;

    std::vector<int> numbers(size);
    std::cout << "Enter " << size << " elements separated by space: ";
    for (int i = 0; i < size; ++i) {
        std::cin >> numbers[i];
    }

    // Find minimum
    int min_val = parallelMin(numbers);
    std::cout << "Minimum: " << min_val << std::endl;

    // Find maximum
    int max_val = parallelMax(numbers);
    std::cout << "Maximum: " << max_val << std::endl;

    // Calculate sum
    int sum_val = parallelSum(numbers);
    std::cout << "Sum: " << sum_val << std::endl;

    // Calculate average
    double avg_val = parallelAverage(numbers);
    std::cout << "Average: " << avg_val << std::endl;

    return 0;
}
//g++ -fopenmp MinMax.cpp -o MinMax
// ./MinMax