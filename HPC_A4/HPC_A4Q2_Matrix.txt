//M
#include <iostream>
#include <vector>
#include <cuda_runtime.h>

// CUDA kernel for matrix multiplication
__global__ void matrixMultiplication(const int *a, const int *b, int *c, int N) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < N && col < N) {
        int sum = 0;
        for (int i = 0; i < N; ++i) {
            sum += a[row * N + i] * b[i * N + col];
        }
        c[row * N + col] = sum;
    }
}

int main() {
    int N;
    std::cout << "Enter the size of the square matrices: ";
    std::cin >> N;

    // Allocate memory for matrices on host
    std::vector<int> host_a(N * N);
    std::vector<int> host_b(N * N);
    std::vector<int> host_c(N * N);

    // Input elements of matrices A and B
    std::cout << "Enter elements of matrix A (" << N << "x" << N << "):" << std::endl;
    for (int i = 0; i < N * N; ++i) {
        std::cin >> host_a[i];
    }

    std::cout << "Enter elements of matrix B (" << N << "x" << N << "):" << std::endl;
    for (int i = 0; i < N * N; ++i) {
        std::cin >> host_b[i];
    }

    // Allocate memory for matrices on device
    int *device_a, *device_b, *device_c;
    cudaMalloc(&device_a, N * N * sizeof(int));
    cudaMalloc(&device_b, N * N * sizeof(int));
    cudaMalloc(&device_c, N * N * sizeof(int));

    // Copy matrices from host to device
    cudaMemcpy(device_a, host_a.data(), N * N * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(device_b, host_b.data(), N * N * sizeof(int), cudaMemcpyHostToDevice);

    // Define grid and block dimensions
    dim3 blockDim(16, 16);
    dim3 gridDim((N + blockDim.x - 1) / blockDim.x, (N + blockDim.y - 1) / blockDim.y);

    // Launch kernel
    matrixMultiplication<<<gridDim, blockDim>>>(device_a, device_b, device_c, N);

    // Copy result matrix from device to host
    cudaMemcpy(host_c.data(), device_c, N * N * sizeof(int), cudaMemcpyDeviceToHost);

    // Print result matrix
    std::cout << "Result matrix (" << N << "x" << N << "):" << std::endl;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            std::cout << host_c[i * N + j] << " ";
        }
        std::cout << std::endl;
    }

    // Free device memory
    cudaFree(device_a);
    cudaFree(device_b);
    cudaFree(device_c);

    return 0;
}
